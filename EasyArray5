/*只出现一次的数字
 *给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
 *说明：
 *你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？
 */
int singleNumber(int* nums, int numsSize) {
    qsort(nums,numsSize);
    for(int i=0; i<numsSize; i+=2) {
        if(i==numsSize-1 || nums[i]!=nums[i+1]) {
            return nums[i];
        }
    }
    return 0;
    
}

void qsort(int* nums, int numsSize) {
    int i = 0, j = numsSize-1, key = nums[i];
    while(i!=j) {
        while(i != j) {
            if (nums[j] < key) {
                nums[i] = nums[j];
                nums[j] = key;
                ++i;
                break;
            } else {
                --j;
            }
        }
        while(i != j) {
            if (nums[i] > key) {
                nums[j] = nums[i];
                nums[i] = key;
                --j;
                break;
            } else {
                ++i;
            }
        } 
    }
    if(i > 0) {
        qsort(nums,i);
    }
    if(numsSize-i > 2) {
        qsort(nums+i+1, numsSize-i-2);
    }
}
